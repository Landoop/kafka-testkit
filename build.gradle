buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
        classpath 'net.researchgate:gradle-release:2.3.4'
    }
}

ext {
    scalaMajorVersion = '2.11'
    junit = '4.12'
    kafkaVersion = '0.10.1.1'
    curatorVersion = '2.9.0'
    zkclientVersion = '0.7'
    confluentVersion = '3.1.1'
}

apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'net.researchgate.release'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'

    group = 'com.datamountaineer'
    version = version
    description = "kafka-testkit"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url "http://packages.confluent.io/maven/" }
    }
}

dependencies {
    compile "junit:junit:$junit"
    compile "com.101tec:zkclient:$zkclientVersion"
    compile "org.apache.kafka:kafka_$scalaMajorVersion:$kafkaVersion"
    compile "org.apache.kafka:kafka_$scalaMajorVersion:$kafkaVersion:test"
    compile "org.apache.kafka:kafka-clients:$kafkaVersion:test"
    compile "org.apache.curator:curator-test:$curatorVersion"
    compile "io.confluent:kafka-schema-registry:$confluentVersion"
}

test {
    maxParallelForks = 1
    minHeapSize '256m'
    maxHeapSize '2048m'
    systemProperty "log4j.configuration","${projectDir}/test/resources/log4j.properties"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

task fatJar(dependsOn : 'shadowJar')

println "Building ${name}-${version}"

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

if (project.hasProperty('release')) {
    // OSSRH publication
    uploadArchives {
        repositories {
            mavenDeployer {
                // POM signature
                beforeDeployment { MavenDeployment deployment ->
                    signing.signPom(deployment)
                }
                // Target repository
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name project.name
                    description project.description
                    packaging 'jar'
                    url 'https://github.com/datamountaineer/kafka-testkit'

                    scm {
                        connection 'scm:git:https://github.com/datamountaineer/kafka-testkit.git'
                        developerConnection 'scm:git:git@github.com:datamountaineer/kafka-testkit.git'
                        url 'https://github.com/datamountaineer/kafka-testkit.git'
                    }

                    licenses {
                        license {
                            name 'Apache License 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.html'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'andrewstevenson'
                            name = 'Andrew Stevenson'
                            email = 'andrew@datamountaineer.com'
                        }
                        developer {
                            id = 'rollulus'
                            name = 'Roel'
                            email = 'rollulus@xs4all.nl'
                        }
                        developer {
                            id = 'johnhofman'
                            name = 'John'
                            email = 'johncarlhofman@gmail.com'
                        }
                    }
                }
            }

        }
    }
}

nexusStaging {
    packageGroup = project.getGroup()
    username = ossrhUsername
    password = ossrhPassword
}
